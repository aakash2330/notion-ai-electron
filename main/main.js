import { app, BrowserWindow } from "electron";
import serve from "electron-serve";
import path from "path";
import { fileURLToPath } from "url";
import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import { Client } from "@notionhq/client";
import axios from "axios";
import { YoutubeTranscript } from "youtube-transcript";
import { Configuration, OpenAIApi } from "openai";

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const appServe = app.isPackaged
  ? serve({
      directory: path.join(__dirname, "../out"),
    })
  : null;

const createWindow = () => {
  const win = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      preload: path.join(__dirname, "preload.js"),
    },
  });

  if (app.isPackaged) {
    appServe(win).then(() => {
      win.loadURL("app://-");
    });
  } else {
    win.loadURL("http://localhost:3000");
    win.webContents.openDevTools();
    win.webContents.on("did-fail-load", (e, code, desc) => {
      win.webContents.reloadIgnoringCache();
    });
  }
};

app.on("ready", () => {
  createWindow();
});

app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

const expapp = express();
const port = 3001;

expapp.use(cors());
expapp.use(express.json());

expapp.get("/api/hello", (req, res) => {
  res.json({ message: "Hello from backend!" });
});

expapp.post("/api/addpage", async (req, res) => {
  try {
    const args = req.body;
    await addPageToDatabase(args);
    res.json({ data: true });
  } catch (error) {
    console.log(error);
    res.json({ data: null });
  }
});

expapp.post("/api/youtube", async (req, res) => {
  try {
    const args = req.body;
    const yotubeData = await getFinalSummary(args);
    res.json({ data: yotubeData });
  } catch (error) {
    console.log(error);
    res.json({ data: null });
  }
});

expapp.post("/api/openai", async (req, res) => {
  try {
    const args = req.body;
    const gptData = await gptAction(args);
    res.json({ data: gptData });
  } catch (error) {
    console.log(error);
    res.json({ data: false });
  }
});

expapp.listen(port, () => {
  console.log(`Backend server running on http://localhost:${port}`);
});

async function addPageToDatabase(args) {
  const notion = new Client({ auth: args.notionKey });
  const parentDatabaseId = args.notionUrl;
  console.log({ parentDatabaseId });
  const response = await notion.pages.create({
    icon: {
      type: "emoji",
      emoji: "✏️",
    },
    parent: {
      type: "database_id",
      database_id: parentDatabaseId,
    },
    properties: {
      Name: {
        title: [
          {
            text: {
              content: args.topic,
            },
          },
        ],
      },
    },

    //content generated by chatGpt
    children: [
      {
        object: "block",
        heading_2: {
          rich_text: [
            {
              text: {
                content: `Here's some important information about ${args.topic}`,
              },
            },
          ],
        },
      },

      {
        object: "block",
        paragraph: {
          rich_text: [
            {
              text: {
                content: args.content,
              },
            },
          ],
          color: "default",
        },
      },

      // summary generated by youtube and chatGpt

      {
        object: "block",
        heading_2: {
          rich_text: [
            {
              text: {
                content: `https://www.youtube.com/watch?v=${args.videoId}`,
              },
            },
          ],
        },
      },

      {
        object: "block",
        heading_2: {
          rich_text: [
            {
              text: {
                content: "here's a summary of the above video .",
              },
            },
          ],
        },
      },

      {
        object: "block",
        paragraph: {
          rich_text: [
            {
              text: {
                content: args.trancriptSummary,
                link: {
                  url: `https://www.youtube.com/watch?v=${args.videoId}`,
                },
              },
              //@ts-ignore
              href: `https://www.youtube.com/watch?v=${args.videoId}`,
            },
          ],
          color: "default",
        },
      },
    ],
  });
  console.log(response);
}

const SearchYoutubeAction = async (searchQuery) => {
  searchQuery = encodeURIComponent(searchQuery);
  const { data } = await axios.get(
    `https://www.googleapis.com/youtube/v3/search?key=${`${process.env.YT_V3_KEY}`}&q=${searchQuery}&videoDuration=medium&videoEmbeddable=true&type=video&maxResults=5&relevanceLanguage=en`,
  );
  if (!data) {
    console.log("youtube fail");
    return null;
  }
  if (data.items[0] == undefined) {
    console.log("youtube fail");
    return null;
  }
  console.log(data.items[0].id.videoId);
  return data.items[0].id.videoId;
};

const getTranscriptFromVideoId = async (videoId) => {
  try {
    let transcript_arr = await YoutubeTranscript.fetchTranscript(videoId, {
      lang: "en",
      //@ts-ignore
      country: "EN",
    });
    let transcript = "";
    for (let t of transcript_arr) {
      transcript += t.text + " ";
    }
    return transcript.replaceAll("\n", "");
  } catch (error) {
    return "";
  }
};

export const summariseTranscript = async (transcript) => {
  let maxLength = 500;
  transcript = transcript.split(" ").slice(0, maxLength).join(" ");
  const summary = await strict_output(
    "You are an AI capable of extracting out useful information from a youtube transcript , only focusing on the main topic and the useful points only",
    `summarise the important points out of the transcript provided in minimum 200 words and less than 300 words and do not talk of the sponsors or that the summary is of a transcript or anything unrelated to the main topic also make sure that the content you generate is in the form of one single paragraph withought breaklines and points that are required to learn about the topic,
       also do not introduce what the summary is about. tranform this trancript in such a way that it doesnt seem like it is extracted out of youtube , but rather
       wikipedia. 
        \n` + transcript,
    { summary: "summary of the transcript" },
  );

  return summary;
};

export async function getFinalSummary(args) {
  try {
    const videoId = await SearchYoutubeAction(args.userPrompt);
    const trancript = await getTranscriptFromVideoId(videoId);
    const summary = await summariseTranscript(trancript);
    return { summary, videoId };
  } catch (error) {
    console.log(error);
  }
}

const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});
const openai = new OpenAIApi(configuration);

export async function strict_output(
  system_prompt,
  user_prompt,
  output_format,
  default_category = "",
  output_value_only = false,
  model = "gpt-3.5-turbo",
  temperature = 1,
  num_tries = 3,
  verbose = false,
) {
  // Use OpenAI to get a response
  const response = await openai.createChatCompletion({
    temperature: temperature,
    model: model,
    messages: [
      {
        role: "system",
        content: system_prompt,
      },
      { role: "user", content: user_prompt.toString() },
    ],
  });

  let res = response.data.choices[0].message?.content?.replace(/'/g, '"') ?? "";

  // ensure that we don't replace away apostrophes in text
  res = res.replace(/(\w)"(\w)/g, "$1'$2");
  return res;
}

//final function that can be called to get chat gpt response in the form of json

async function gptChatFunction(userPrompt) {
  let questions;
  const reqArray = `You are a helpful AI that is able to generate a handful learning material in the form of one single paragraph withought breaklines and points that are required to learn about the topic - ${userPrompt} `;
  questions = await strict_output(
    "You are a helpful AI that is able to generate a handful of userful information about the topic provided",
    reqArray,
    {
      content:
        "important content about the topic with min length of 20 and max length of 30 words",
    },
  );
  return questions;
}

export const gptAction = async (args) => {
  console.log(args.userPrompt);
  const response = await gptChatFunction(args.userPrompt);
  return response || "sorry , an error occured";
};
